type: edu
custom_name: stage5
files:
- name: test/Test.java
  visible: false
  text: |
    import calculator.MainKt;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.SimpleTestCase;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest {

        public Test() {
            super(MainKt.class);
        }

        @Override
        public List<SimpleTestCase> generate() {
            return Arrays.asList(
                new SimpleTestCase(
                    "100 + 200 - 300\n/exit",
                    "0\nBye!"
                ),
                new SimpleTestCase(
                    "4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n/exit",
                    "2\n-5\n11\nBye!"
                ),
                new SimpleTestCase(
                    "abc\n123+\n+15\n18 22\n\n-22\n22-\n/exit",
                    "Invalid expression\n" +
                        "Invalid expression\n" +
                        "15\n" +
                        "Invalid expression\n" +
                        "-22\n" +
                        "Invalid expression\n" +
                        "Bye!"
                ),
                new SimpleTestCase(
                    "/go\n/exit",
                    "Unknown command\nBye!"
                )
            );
        }
    }
  learner_created: false
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    import java.util.*

    fun main() {
        val regex = "\\s+".toRegex()
        loop@ while (true) {
            var scanner = Scanner(System.`in`)
            val input = scanner.nextLine()
            try {
                if (input.isBlank()) continue
                if (input.first() == '/') {
                    when (input.toLowerCase()) {
                        "/exit" -> {
                            println("Bye!")
                            return
                        }
                        "/help" -> println("The program calculates the sum of numbers")
                        else -> println("Invalid command")
                    }
                    continue
                }
                val inputs = input.split(regex)
                var sum = 0;
                var signOfNextNumber = 1
                for (term in inputs) {
                    var nextNumber = 0
                    loop1@ for ((i, c) in term.withIndex()) {
                        when (c) {
                            '-' -> signOfNextNumber *= -1
                            '+' -> continue@loop1
                            in '0'..'9' -> {
                                nextNumber = term.substring(i).toInt() * signOfNextNumber
                                signOfNextNumber = 1
                                break@loop1
                            }
                        }
                    }
                    sum += nextNumber
                }
                println(sum)
            } catch (e: Exception) {
                println("Unexpected error")
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/490/implement
status: Solved
record: 5
